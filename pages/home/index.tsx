import { AppPageLoading } from "@/components/atoms/AppLoading";
import NavigationBar, {
  homeActiveTabs,
} from "@/components/home/navigation_bar";
import EvaluationPost from "@/components/home/post";
import RecommendFollowableUsers from "@/components/home/recommendFollowableUsers";
import UserStatusInput from "@/components/home/userStatusInput";
import LeftSide from "@/components/leftSide";
import ConfirmModal from "@/components/mocules/confirmModal";
import CustomizedSnackbars from "@/components/mocules/snackbars";
import RightSide from "@/components/rightSide";
import constants from "@/constants/index";
import useForceSignIn from "@/hooks/useForceSignIn";
import useNewsFeed from "@/hooks/useNewsFeed";
import usePrefetchProfilePage from "@/hooks/usePrefetchProfilePage";
import { useRefreshNewsFeed } from "@/hooks/useRefreshNewsFeed";
import useFetchPostsOnScroll from "@/hooks/use_fetch_posts_on_scroll";
import appPages from "@/shared/appPages";
import { TrendingPostsRequestDto } from "apis/home/interfaces";
import postListAPI from "apis/home/postListAPI";
import { GetServerSideProps } from "next";
import { signIn } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { useSelector } from "react-redux";
import { AuthState } from "redux/slices/auth/authSlice";
import { PostListState, PostState } from "redux/slices/home/posts/interfaces";
import { convertPostListDtoToPostListState } from "redux/slices/home/posts/postsConverter";
import { RootState } from "redux/store/store";
import styles from "./styles.module.css";

export default function Home({ posts: initialPosts }: HomeGetServerSideProps) {
  const { syncDBStatus }: AuthState = useSelector(
    (state: RootState) => state.auth
  );
  const { posts, loading: postsLoading }: PostListState = useSelector(
    (state: RootState) => state.postList
  );

  useForceSignIn();
  useNewsFeed({ initialPosts });
  useRefreshNewsFeed();
  usePrefetchProfilePage({ ids: posts?.map((p) => p.postOwner.id) });
  useFetchPostsOnScroll();

  const [loginRequireVisible, setLoginRequireVisible] =
    useState<boolean>(false);

  const handleSignInConfirmClick = async () => {
    await signIn("google");
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>{"Let's explore nice places !"}</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href={
            "https://res.cloudinary.com/dggrsi7ck/image/upload/v1671247771/app-logo_emyf9f.png"
          }
        />
      </Head>
      <main className={styles.main}>
        <LeftSide currentPage={appPages.home} />
        <div className={styles.contentContainer}>
          <NavigationBar tabs={homeActiveTabs} type="APP" />
          <UserStatusInput />
          <RecommendFollowableUsers />
          <div className={styles.listPost}>
            {postsLoading == "loading" || syncDBStatus == "pending" ? (
              <AppPageLoading />
            ) : (
              posts.map((post: PostState) => (
                <EvaluationPost key={post.id} postState={post} />
              ))
            )}
          </div>
        </div>
        <RightSide />
      </main>
      <CustomizedSnackbars />
      <ConfirmModal
        trigger={undefined}
        title={constants.loginRequireTitle}
        description={constants.loginRequireBody}
        visible={loginRequireVisible}
        onConfirmClick={handleSignInConfirmClick}
        onCloseClick={() => setLoginRequireVisible(false)}
        loading={false}
      />
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export interface HomeGetServerSideProps {
  posts?: PostState[];
}

export const getServerSideProps: GetServerSideProps<
  HomeGetServerSideProps
> = async () => {
  const request: TrendingPostsRequestDto = {
    offset: 0,
    limit: 10,
    min_like_count: 3,
    min_comment_count: 5,
    min_share_count: 3,
  };

  const data = await postListAPI.getTrendingPosts(request);

  const posts = convertPostListDtoToPostListState({
    postListDto: data?.evaluation_post,
  });

  return {
    props: {
      posts,
    },
  };
};
