import { AppPageLoading } from "@/components/atoms/AppLoading";
import NavigationBar, {
  homeActiveTabs,
} from "@/components/home/navigation_bar";
import EvaluationPost from "@/components/home/post";
import RecommendFollowableUsers from "@/components/home/recommendFollowableUsers";
import UserStatusInput from "@/components/home/userStatusInput";
import LeftSide from "@/components/leftSide";
import ConfirmModal from "@/components/mocules/confirmModal";
import CustomizedSnackbars from "@/components/mocules/snackbars";
import RightSide from "@/components/rightSide";
import useNewsFeed from "@/hooks/useNewsFeed";
import { useSnackbarNotificationAndRefreshNewsFeed } from "@/hooks/useSnackbarNotificationAndRefreshNewsFeed";
import appPages from "@/shared/appPages";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { AuthState } from "redux/slices/auth/authSlice";
import { PostState } from "redux/slices/home/posts/postListSlice";
import { RootState } from "redux/store/store";
import styles from "./styles.module.css";

export default function Home() {
  const { data: session, status: sessionState } = useSession();
  const { session: authSession, syncDBStatus }: AuthState = useSelector(
    (state: RootState) => state.auth
  );
  const { posts, loading: postsLoading } = useSelector(
    (state: RootState) => state.postList
  );
  const { refreshNewsFeed } = useNewsFeed();
  useSnackbarNotificationAndRefreshNewsFeed();
  const [loginRequireVisible, setLoginRequireVisible] =
    useState<boolean>(false);

  useEffect(() => {
    if ((session as any)?.error === "RefreshAccessTokenError") {
      signIn(); // Force sign in to hopefully resolve error
    }
  }, [session]);

  const handlePageClick = () => {
    if (authSession == null) {
      setLoginRequireVisible(true);
    }
  };

  return (
    <div className={styles.container} onClick={handlePageClick}>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <LeftSide currentPage={appPages.home} />
        <div className={styles.contentContainer}>
          <NavigationBar tabs={homeActiveTabs} />
          <UserStatusInput refreshNewsFeed={refreshNewsFeed} />
          <RecommendFollowableUsers />
          <div className={styles.listPost}>
            {postsLoading == "loading" || syncDBStatus == "pending" ? (
              <AppPageLoading />
            ) : (
              posts.map((post: PostState) => (
                <EvaluationPost key={post.id} postState={post} />
              ))
            )}
          </div>
        </div>
        <RightSide />
      </main>
      <CustomizedSnackbars />
      <ConfirmModal
        trigger={undefined}
        title={"Please login to use the application !"}
        description={
          "You need login by your google account, or register a new account to use full features of this application."
        }
        visible={loginRequireVisible}
        onConfirmClick={() => signIn("google")}
        onCloseClick={() => setLoginRequireVisible(false)}
        loading={false}
      />
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
