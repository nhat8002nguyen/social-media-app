import { AppPageLoading } from "@/components/atoms/AppLoading";
import NavigationBar, {
  homeActiveTabs,
  NavigationBarProps,
  profilePostTabs,
} from "@/components/home/navigation_bar";
import EvaluationPost from "@/components/home/post";
import LeftSide from "@/components/leftSide";
import CustomizedSnackbars from "@/components/mocules/snackbars";
import ProfileSummaryCard from "@/components/profile/profile_summary_card/ProfileSummaryCard";
import RightSide from "@/components/rightSide";
import profileServices, {
  ProfilePageGetServerSideProps,
} from "@/services/profileServices";
import appPages from "@/shared/appPages";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useEffect } from "react";
import { useSelector } from "react-redux";
import { AuthState } from "redux/slices/auth/authSlice";
import {
  PostListState,
  PostState,
  setPostsList,
} from "redux/slices/home/posts/postListSlice";
import { setProfileSummary } from "redux/slices/profile/summary/summarySlice";
import { RootState, useAppDispatch } from "redux/store/store";
import styles from "./styles.module.css";

export default function PersonProfile({
  summary: initialSummary,
  posts: postsOfUser,
  likedPosts: postsLikedByUser,
  sharedPosts,
}: ProfilePageGetServerSideProps) {
  const dispatch = useAppDispatch();
  const { data: session, status: sessionState } = useSession();

  const { session: authSession }: AuthState = useSelector(
    (state: RootState) => state.auth
  );
  const { posts }: PostListState = useSelector(
    (state: RootState) => state.postList
  );

  useEffect(() => {
    if ((session as any)?.error === "RefreshAccessTokenError") {
      signIn(); // Force sign in to hopefully resolve error
    }
  }, [session]);

  useEffect(() => {
    dispatch(setProfileSummary(initialSummary));
  }, [initialSummary]);

  useEffect(() => {
    dispatch(setPostsList(postsOfUser));
    console.log(postsOfUser);
    console.log(postsLikedByUser);
    console.log(sharedPosts);
  }, [postsOfUser]);

  const handlePostTabChange = (tab: NavigationBarProps["tabs"][number]) => {
    switch (tab.name) {
      case "POST":
        dispatch(setPostsList(postsOfUser));
        break;
      case "LIKED":
        dispatch(setPostsList(postsLikedByUser));
        break;
      case "SHARED":
        dispatch(setPostsList(sharedPosts));
        break;
      default:
        dispatch(setPostsList(postsOfUser));
        break;
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <LeftSide currentPage={appPages.profile} />
        <div className={styles.contentContainer}>
          <NavigationBar tabs={homeActiveTabs} type="APP" />
          <ProfileSummaryCard summary={initialSummary} />
          <NavigationBar
            tabs={profilePostTabs}
            type="PROFILE"
            onTabChange={handlePostTabChange}
          />
          <div className={styles.listPost}>
            {posts.length == 0 ? (
              <AppPageLoading />
            ) : (
              posts.map((post: PostState) => (
                <EvaluationPost key={post.id} postState={post} />
              ))
            )}
          </div>
        </div>
        <RightSide />
      </main>
      <CustomizedSnackbars />
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps<
  ProfilePageGetServerSideProps
> = async (context: GetServerSidePropsContext) => {
  try {
    const sessionUserId = context.params.sessionUserId;
    const userId = context.params.id;

    const summaryReq = profileServices.fetchUserSummary(userId);
    const postsReq = profileServices.fetchUserPosts(
      userId,
      parseInt(
        typeof sessionUserId == "string" ? sessionUserId : sessionUserId[0]
      )
    );
    const likedPostsReq = profileServices.fetchUserLikedPosts({
      userId: parseInt(typeof userId == "string" ? userId : userId[0]),
      sessionUserId: parseInt(
        typeof sessionUserId == "string" ? sessionUserId : sessionUserId[0]
      ),
    });
    const sharedPostReq = profileServices.fetchUserSharedPosts({
      userId: parseInt(typeof userId == "string" ? userId : userId[0]),
      sessionUserId: parseInt(
        typeof sessionUserId == "string" ? sessionUserId : sessionUserId[0]
      ),
    });

    const [summary, posts, likedPosts, sharedPosts] = await Promise.all([
      summaryReq,
      postsReq,
      likedPostsReq,
      sharedPostReq,
    ]);

    return {
      props: {
        summary,
        posts,
        likedPosts,
        sharedPosts,
      },
    };
  } catch (err) {
    console.error(err);
    throw Error("Can not fetch profile info of user " + context.params.id);
  }
};
